{"ast":null,"code":"import { GET_DOGS, GET_TEMPERAMENTS, SEARCH_DOGS, SET_LOADING, SET_PAGE, SET_TOTAL_PAGE, FILTER_BY_ORIGIN, FILTER_BY_TEMPERAMENT, SORT_ORDER, UPDATE_ORDER, CLEAN_FILTER, SET_CLEAN } from \"./actionType\";\nconst initialState = {\n  allDogs: [],\n  allTemperaments: [],\n  filteredData: [],\n  currentPage: 1,\n  totalPages: 1,\n  isLoading: false,\n  isClean: false,\n  sortOrder: \"asc\"\n};\nexport default function rootReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case GET_DOGS:\n      //Reducer para actualizar todos los perros\n      return {\n        ...state,\n        allDogs: payload,\n        filteredData: payload,\n        sortOrder: \"asc\"\n      };\n    case SET_TOTAL_PAGE:\n      //Reducer para actualizar total de p치ginas\n      return {\n        ...state,\n        totalPages: Math.ceil(state.filteredData.length / 8)\n      };\n    case SET_PAGE:\n      //Reducer para actualizar p치gina actual\n      return {\n        ...state,\n        currentPage: payload\n      };\n    case SEARCH_DOGS:\n      //Reducer para actualizar resultados de la busqueda\n      return {\n        ...state,\n        filteredData: payload\n      };\n    case SET_LOADING:\n      //Reducer para actualizar estado de carga\n      return {\n        ...state,\n        isLoading: payload\n      };\n    case GET_TEMPERAMENTS:\n      //Reducer para actualizar todos los temperamentos\n      return {\n        ...state,\n        allTemperaments: payload\n      };\n    case FILTER_BY_ORIGIN:\n      {\n        //Reducer para filtrar por origen\n        const filterOrigin = payload;\n        let filteredDogsData;\n        if (filterOrigin === 'all') {\n          return {\n            ...state,\n            currentPage: 1,\n            filteredData: state.allDogs\n          };\n        }\n        if (filterOrigin === 'api') {\n          filteredDogsData = state.allDogs.filter(dog => !dog.created);\n        } else if (filterOrigin === 'db') {\n          filteredDogsData = state.allDogs.filter(dog => dog.created);\n        } else {\n          filteredDogsData = [];\n        }\n        return {\n          ...state,\n          currentPage: 1,\n          filteredData: filteredDogsData,\n          sortOrder: \"asc\"\n        };\n      }\n      ;\n    case FILTER_BY_TEMPERAMENT:\n      {\n        //Reducer para filtrar por temperamento\n        const filterTemperament = payload;\n        let filteredDogsData;\n        if (filterTemperament === 'all') {\n          return {\n            ...state,\n            currentPage: 1,\n            filteredData: state.allDogs\n          };\n        }\n        filteredDogsData = state.allDogs.filter(dog => dog.temperament && dog.temperament.includes(filterTemperament));\n        return {\n          ...state,\n          currentPage: 1,\n          filteredData: filteredDogsData,\n          sortOrder: \"asc\"\n        };\n      }\n      ;\n    case SORT_ORDER:\n      {\n        //Reducer para definir orden\n        const newSortOrder = state.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n        const sortedList = [...state.filteredData];\n        sortedList.sort((a, b) => {\n          if (newSortOrder === \"asc\") {\n            return a.name.localeCompare(b.name);\n          } else {\n            return b.name.localeCompare(a.name);\n          }\n        });\n        return {\n          ...state,\n          sortOrder: newSortOrder,\n          filteredData: sortedList\n        };\n      }\n      ;\n    case UPDATE_ORDER:\n      //Reducer para actualizar orden\n      return {\n        ...state,\n        sortedList: payload\n      };\n    case SET_CLEAN:\n      //Reducer para actualizar estado de limpieza\n      return {\n        ...state,\n        isClean: payload\n      };\n    case CLEAN_FILTER:\n      //Reducer para limpiar filtros\n      return {\n        ...state,\n        filteredData: state.allDogs,\n        sortOrder: \"asc\"\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_DOGS","GET_TEMPERAMENTS","SEARCH_DOGS","SET_LOADING","SET_PAGE","SET_TOTAL_PAGE","FILTER_BY_ORIGIN","FILTER_BY_TEMPERAMENT","SORT_ORDER","UPDATE_ORDER","CLEAN_FILTER","SET_CLEAN","initialState","allDogs","allTemperaments","filteredData","currentPage","totalPages","isLoading","isClean","sortOrder","rootReducer","state","type","payload","Math","ceil","length","filterOrigin","filteredDogsData","filter","dog","created","filterTemperament","temperament","includes","newSortOrder","sortedList","sort","a","b","name","localeCompare"],"sources":["/Users/macbookpro/Desktop/PI-Dogs SP-main/client/src/redux/reducer.js"],"sourcesContent":["import { GET_DOGS, \n    GET_TEMPERAMENTS, \n    SEARCH_DOGS, \n    SET_LOADING, \n    SET_PAGE, \n    SET_TOTAL_PAGE, \n    FILTER_BY_ORIGIN, \n    FILTER_BY_TEMPERAMENT, \n    SORT_ORDER, \n    UPDATE_ORDER, \n    CLEAN_FILTER, \n    SET_CLEAN } from \"./actionType\";\n\nconst initialState = {\n    allDogs: [],\n    allTemperaments: [],\n    filteredData: [],\n    currentPage: 1,\n    totalPages: 1,\n    isLoading: false,\n    isClean: false,\n    sortOrder: \"asc\"\n}\n\nexport default function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case GET_DOGS: //Reducer para actualizar todos los perros\n            return {\n                ...state,\n                allDogs: payload,\n                filteredData: payload,\n                sortOrder: \"asc\"\n            };\n        case SET_TOTAL_PAGE: //Reducer para actualizar total de p치ginas\n            return {\n                ...state,\n                totalPages: Math.ceil(state.filteredData.length / 8)\n            };\n        case SET_PAGE: //Reducer para actualizar p치gina actual\n            return {\n                ...state,\n                currentPage: payload\n            };\n        case SEARCH_DOGS: //Reducer para actualizar resultados de la busqueda\n            return {\n                ...state,\n                filteredData: payload\n            };\n        case SET_LOADING: //Reducer para actualizar estado de carga\n            return {\n                ...state,\n                isLoading: payload\n            };\n        case GET_TEMPERAMENTS: //Reducer para actualizar todos los temperamentos\n            return {\n                ...state,\n                allTemperaments: payload\n            };\n        case FILTER_BY_ORIGIN: { //Reducer para filtrar por origen\n            const filterOrigin = payload;\n            let filteredDogsData;\n\n            if (filterOrigin === 'all') {\n                return {\n                    ...state,\n                    currentPage: 1,\n                    filteredData: state.allDogs,\n                };\n            }\n            if (filterOrigin === 'api') {\n                filteredDogsData = state.allDogs.filter((dog) => !dog.created);\n            } else if (filterOrigin === 'db') {\n                filteredDogsData = state.allDogs.filter((dog) => dog.created);\n            } else {\n                filteredDogsData = [];\n            }\n\n            return {\n                ...state,\n                currentPage: 1,\n                filteredData: filteredDogsData,\n                sortOrder: \"asc\"\n            };\n        };\n        case FILTER_BY_TEMPERAMENT: { //Reducer para filtrar por temperamento\n            const filterTemperament = payload;\n            let filteredDogsData;\n\n            if (filterTemperament === 'all') {\n                return {\n                    ...state,\n                    currentPage: 1,\n                    filteredData: state.allDogs,\n                };\n            }\n\n            filteredDogsData = state.allDogs.filter((dog) =>\n                dog.temperament && dog.temperament.includes(filterTemperament)\n            );\n\n            return {\n                ...state,\n                currentPage: 1,\n                filteredData: filteredDogsData,\n                sortOrder: \"asc\"\n            };\n        };\n        case SORT_ORDER: { //Reducer para definir orden\n            const newSortOrder = state.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n            const sortedList = [...state.filteredData];\n            sortedList.sort((a, b) => {\n                if (newSortOrder === \"asc\") {\n                    return a.name.localeCompare(b.name);\n                } else {\n                    return b.name.localeCompare(a.name);\n                }\n            });\n\n            return {\n                ...state,\n                sortOrder: newSortOrder,\n                filteredData: sortedList,\n            };\n        };\n        case UPDATE_ORDER: //Reducer para actualizar orden\n            return {\n                ...state,\n                sortedList: payload,\n            };\n        case SET_CLEAN: //Reducer para actualizar estado de limpieza\n            return {\n                ...state,\n                isClean: payload\n            };\n        case CLEAN_FILTER: //Reducer para limpiar filtros\n            return {\n                ...state,\n                filteredData: state.allDogs,\n                sortOrder: \"asc\",\n            };\n        default:\n            return state;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}